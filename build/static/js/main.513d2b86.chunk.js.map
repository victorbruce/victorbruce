{"version":3,"sources":["components/Navbar/index.jsx","components/Clock/clock.jsx","components/CountDown/countDown.jsx","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Clock","_ref","days","hours","minutes","seconds","onCountDown","CountDown","state","deadline","status","handleCountDown","setInterval","distance","Date","_this","getTime","setState","Math","floor","_this$state","this","countDown","clock","Component","Footer","getFullYear","App","components_Navbar","CountDown_countDown","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAuBeA,EArBA,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,gBAGAJ,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBACVE,KAAK,SACLC,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEXV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,2BCHTQ,EAZD,SAAAC,GAAoD,IAAjDC,EAAiDD,EAAjDC,KAAMC,EAA2CF,EAA3CE,MAAOC,EAAoCH,EAApCG,QAASC,EAA2BJ,EAA3BI,QAASC,EAAkBL,EAAlBK,YAC9C,OACEjB,EAAAC,EAAAC,cAAA,WACGe,IACDjB,EAAAC,EAAAC,cAAA,YAAOW,EAAP,MACAb,EAAAC,EAAAC,cAAA,YAAOY,EAAP,MACAd,EAAAC,EAAAC,cAAA,YAAOa,EAAP,MACAf,EAAAC,EAAAC,cAAA,YAAOc,EAAP,OCmDSE,6MAxDbC,MAAQ,CACNC,SAAU,mBACVC,OAAQ,GACRR,KAAM,EACNC,MAAO,EACPC,QAAS,EACTC,QAAS,KAGXM,gBAAkB,WAChBC,YAAY,WACV,IAEMC,EAFe,IAAIC,KAAKC,EAAKP,MAAMC,UAAUO,WACvC,IAAIF,MAAOE,UAGnBH,EAAW,GACbE,EAAKE,SAAS,CAAEP,OAAQ,YAE1BK,EAAKE,SAAS,CACZf,KAAMgB,KAAKC,MAAMN,EAAQ,OACzBV,MAAOe,KAAKC,MACTN,EAAQ,MAAT,MAEFT,QAASc,KAAKC,MAAON,EAAQ,KAAT,KACpBR,QAASa,KAAKC,MAAON,EAAQ,IAAkB,QAEhD,8EAGI,IAAAO,EAC2CC,KAAKb,MAA/CN,EADDkB,EACClB,KAAMC,EADPiB,EACOjB,MAAOC,EADdgB,EACchB,QAASC,EADvBe,EACuBf,QAC1BiB,EAAY,UAehB,MAbe,KAJRF,EACgCV,SAIrCY,EACEjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgC,EAAD,CACErB,KAAMA,EACNC,MAAOA,EACPC,QAASA,EACTC,QAASA,EACTC,YAAae,KAAKV,oBAMxBtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,+BACC+B,EACDjC,EAAAC,EAAAC,cAAA,oDAnDgBiC,aCOTC,EARA,WACb,OACEpC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,kBAAW,IAAIuB,MAAOY,iBCYbC,mLAVX,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACuC,EAAD,cANUN,aCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.513d2b86.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        Victor Bruce\n      </a>\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarNav\"\n        aria-controls=\"navbarNav\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\" />\n      </button>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nconst Clock = ({ days, hours, minutes, seconds, onCountDown }) => {\n  return (\n    <div>\n      {onCountDown()}\n      <span>{days}d </span>\n      <span>{hours}h </span>\n      <span>{minutes}m </span>\n      <span>{seconds}s</span>\n    </div>\n  );\n};\n\nexport default Clock;\n","import React, { Component } from \"react\";\nimport Clock from \"../Clock/clock\";\n\nclass CountDown extends Component {\n  state = {\n    deadline: \"31 January, 2019\",\n    status: \"\",\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  };\n\n  handleCountDown = () => {\n    setInterval(() => {\n      const deadlineDate = new Date(this.state.deadline).getTime();\n      const now = new Date().getTime();\n      const distance = deadlineDate - now;\n\n      if (distance < 0) {\n        this.setState({ status: \"Expired\" });\n      }\n      this.setState({\n        days: Math.floor(distance / (1000 * 60 * 60 * 24)),\n        hours: Math.floor(\n          (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n        ),\n        minutes: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n        seconds: Math.floor((distance % (1000 * 60)) / 1000)\n      });\n    }, 1000);\n  };\n\n  render() {\n    const { days, hours, minutes, seconds, status } = this.state;\n    let countDown = \"Expired\";\n\n    if (status === \"\") {\n      countDown = (\n        <div>\n          <Clock\n            days={days}\n            hours={hours}\n            minutes={minutes}\n            seconds={seconds}\n            onCountDown={this.handleCountDown}\n          />\n        </div>\n      );\n    }\n    return (\n      <div className=\"countDown\">\n        <p>Under Construction</p>\n        {countDown}\n        <code>Full-stack software engineer</code>\n      </div>\n    );\n  }\n}\n\nexport default CountDown;","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <p>&copy; {new Date().getFullYear()}</p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport CountDown from \"./components/CountDown/countDown\";\nimport Footer from \"./components/Footer\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <CountDown />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}